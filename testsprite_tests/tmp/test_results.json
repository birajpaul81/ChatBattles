[
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "f103dafc-1d72-450e-94c5-7b020ce563de",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC001-User sign-up with valid credentials",
    "description": "Verify that a new user can successfully sign up using valid email and password, and receives a confirmation of account creation.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to the sign-up page by clicking the 'Sign Up' link\n        frame = context.pages[-1]\n        # Click the 'Sign Up' link to go to the sign-up page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid email address and strong password into the form fields\n        frame = context.pages[-1]\n        # Input valid email address\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input strong password\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('StrongPassw0rd!')\n        \n\n        # -> Submit the sign-up form by clicking the 'Continue' button\n        frame = context.pages[-1]\n        # Click the 'Continue' button to submit the sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Account creation failed due to invalid credentials').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError('Test case failed: The user was not successfully registered or did not receive a confirmation message after sign-up as expected in the test plan.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The sign-up process could not be completed due to a security validation failure error message after submitting valid credentials. This prevents new user registration and confirmation. The issue should be reported to the development team for resolution before further testing. Task stopped.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP7TCE78nrHIJZ9ZuOeOuf4Q:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP7TCE78nrHIJZ9ZuOeOuf4Q:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127713512903//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.341Z",
    "modified": "2025-10-22T10:08:33.633Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "39a2cd4d-9f05-4ce2-b253-46f7f4d8ce02",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC002-User sign-up with existing email",
    "description": "Verify that sign-up fails with an appropriate error message when using an email already registered.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to sign-up page by clicking the Sign Up link\n        frame = context.pages[-1]\n        # Click the Sign Up link to navigate to the sign-up page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input an already registered email and a valid password\n        frame = context.pages[-1]\n        # Input an already registered email address\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('registered@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input a valid password\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('ValidPassword123!')\n        \n\n        # -> Click the Continue button to submit the sign-up form\n        frame = context.pages[-1]\n        # Click the Continue button to submit the sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Registration Successful! Welcome aboard')).to_be_visible(timeout=5000)\n        except AssertionError:\n            raise AssertionError('Test failed: Sign-up should not succeed with an already registered email. Expected an error message about the email already being in use, but the success message was not found.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The sign-up attempt with an already registered email failed as expected, but the error message shown is about failed security validations rather than indicating the email is already in use. This does not fully meet the test requirement to verify the appropriate error message for an already registered email. Test concluded with this observation.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP3ocqhuzdYUnDMHbP0PBvr2:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP3ocqhuzdYUnDMHbP0PBvr2:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127693125166//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.347Z",
    "modified": "2025-10-22T10:08:13.269Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "234e064d-98a3-4636-bc62-29ed1c7a158f",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC003-User sign-in with valid credentials",
    "description": "Verify user can sign in successfully with correct email and password.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to sign-in page by clicking the 'Sign In' link\n        frame = context.pages[-1]\n        # Click on the 'Sign In' link to go to the sign-in page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid email into the email field\n        frame = context.pages[-1]\n        # Input valid email address into email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed to password input\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a different valid email address to proceed with sign-in\n        frame = context.pages[-1]\n        # Input a different valid email address into email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed to password input\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account or check for test user creation options\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to create a new account or find test user creation options\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a new valid email and password to create an account\n        frame = context.pages[-1]\n        # Input new valid email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('newtestuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Welcome to the Battle Mode Interface').first).to_be_visible(timeout=30000)\n        except AssertionError:\n            raise AssertionError(\"Test plan execution failed: User sign-in was not successful, user was not redirected to the Battle Mode interface, and session was not created as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The sign-in test cannot be completed because no valid user account exists. Attempts to create a new account fail due to security validation errors. Please resolve the sign-up issue or provide valid test credentials. Stopping the test now.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP45HEs9PIqbwkRPV1J4TQ8A:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP45HEs9PIqbwkRPV1J4TQ8A:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP45HEs9PIqbwkRPV1J4TQ8A:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP45HEs9PIqbwkRPV1J4TQ8A:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127849155691//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.354Z",
    "modified": "2025-10-22T10:10:49.285Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "e1d82bb4-440b-4570-9436-923b40f648d9",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC004-User sign-in with invalid credentials",
    "description": "Ensure that sign-in fails with invalid email/password combinations and an appropriate error message is shown.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on the 'Sign In' link to navigate to the sign-in page\n        frame = context.pages[-1]\n        # Click on the 'Sign In' link to go to the sign-in page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input an invalid email into the email address field\n        frame = context.pages[-1]\n        # Input invalid email into the email address field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('invalid@example.com')\n        \n\n        # -> Click the 'Continue' button to submit the sign-in form with invalid email\n        frame = context.pages[-1]\n        # Click the 'Continue' button to submit the sign-in form with invalid email\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address to proceed to password entry\n        frame = context.pages[-1]\n        # Input valid email into the email address field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click the 'Continue' button to proceed to password entry\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Login Successful! Welcome back').first).to_be_visible(timeout=3000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: Sign-in did not succeed as expected with invalid email/password combinations. The login should fail and show an appropriate error message, but 'Login Successful! Welcome back' was not found on the page, confirming the failure.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Sign-in fails correctly with invalid email showing appropriate error message. However, testing invalid password scenario is blocked because the system does not recognize the valid email and does not proceed to password entry. Task partially completed.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP4O3sALl6AhnrGVY6e5RTrb:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP4O3sALl6AhnrGVY6e5RTrb:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP4O3sALl6AhnrGVY6e5RTrb:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127706336235//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.359Z",
    "modified": "2025-10-22T10:08:26.542Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "20f3c215-9e08-481c-8a35-c261bd7e57f5",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC005-Access Battle Mode UI without authentication",
    "description": "Verify unauthenticated users are redirected to sign-in when attempting to access the Battle Mode chat interface.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Directly navigate to the Battle Mode chat interface URL while logged out to verify redirection to sign-in page.\n        await page.goto('http://localhost:3000/battle-mode', timeout=10000)\n        await asyncio.sleep(3)\n        \n\n        # --> Assertions to verify final state\n        try:\n            await expect(page.locator('text=Welcome to Battle Mode Chat!').first).to_be_visible(timeout=5000)\n        except AssertionError:\n            raise AssertionError('Test failed: Unauthenticated user was not redirected to sign-in page when accessing Battle Mode chat interface.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped. The Battle Mode chat interface URL returns a 404 error page without redirecting unauthenticated users to the sign-in page. This is a critical issue preventing further verification of the task. Issue has been reported.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP5btupJPNEdIMqu0mZXjyJD:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/battle-mode:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP5btupJPNEdIMqu0mZXjyJD:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127581384996//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.366Z",
    "modified": "2025-10-22T10:06:21.541Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "cac79001-3be8-4c1e-a43b-509b987132b6",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC006-Real-time side-by-side AI response streaming",
    "description": "Validate that when a user submits a chat prompt, the three AI models (GPT-5-Nano, Grok-4, DeepSeek v3.1) respond simultaneously with streaming outputs and typewriter effect.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click the 'Start Chatting Free' button to enter the Battle Mode chat interface.\n        frame = context.pages[-1]\n        # Click the 'Start Chatting Free' button to enter the Battle Mode chat interface\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address and click Continue to authenticate.\n        frame = context.pages[-1]\n        # Input a valid email address in the email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click the 'Sign up' link to create a new account for authentication.\n        frame = context.pages[-1]\n        # Click the 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create the account and proceed.\n        frame = context.pages[-1]\n        # Input a valid email address in the email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input a strong password in the password field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('StrongPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit the sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=AI Model Response Panel XYZ').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: The three AI models (GPT-5-Nano, Grok-4, DeepSeek v3.1) did not respond simultaneously with streaming outputs and typewriter effect as expected in the Battle Mode chat interface.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed because account creation is blocked by security validation errors on the sign-up page. The user cannot authenticate and access the Battle Mode chat interface to test the AI models' simultaneous streaming responses. Issue reported for resolution.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP3hXCh4amfJgMa7LsHxIFUK:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP3hXCh4amfJgMa7LsHxIFUK:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP3hXCh4amfJgMa7LsHxIFUK:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/176112776861772//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.371Z",
    "modified": "2025-10-22T10:09:28.803Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "925cda91-b67e-48a8-91e2-b6d64761f430",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC007-Submit chat input with text and image attachments",
    "description": "Check that the chat input accepts text plus image attachments via drag-and-drop and uploads properly, triggering AI responses.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Sign In' to authenticate and access Battle Mode chat.\n        frame = context.pages[-1]\n        # Click on 'Sign In' to authenticate\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address in the email input field.\n        frame = context.pages[-1]\n        # Input a valid email address in the email input field.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click the Continue button to proceed with sign-in.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' to create a new account since the email is not recognized.\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to create a new account.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create the account and proceed to Battle Mode chat.\n        frame = context.pages[-1]\n        # Input a valid email address in the email input field.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input a valid password in the password input field.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click the Continue button to create the account.\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Image upload successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: The chat input did not accept or upload the image attachment properly, or the AI response did not incorporate the multimodal input as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Sign-up failed due to security validation errors, preventing access to Battle Mode chat. Cannot proceed with testing chat input with image attachments. Reporting the issue and stopping further testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP64KT5TPGVISWwPEeg4JgfH:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP64KT5TPGVISWwPEeg4JgfH:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP64KT5TPGVISWwPEeg4JgfH:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127785393647//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.377Z",
    "modified": "2025-10-22T10:09:45.587Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "619b11dc-03e6-4331-a295-6fb210ca3c11",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC008-Submit chat input with document attachment",
    "description": "Validate chat input supports document attachment upload (PDF/DOC/XLS), uploads correctly, and AI models handle document content or provide fallback analysis.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Sign In' to authenticate and access Battle Mode chat.\n        frame = context.pages[-1]\n        # Click on 'Sign In' to go to login page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to proceed with authentication.\n        frame = context.pages[-1]\n        # Input email address for sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account for authentication.\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to navigate to registration page\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create the account and proceed to authenticated Battle Mode chat.\n        frame = context.pages[-1]\n        # Input email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Document upload successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: Document attachment upload and AI processing verification did not pass as per the test plan.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to sign-up failure caused by security validation errors. Cannot access authenticated Battle Mode chat to validate document attachment upload and AI processing. Issue reported.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP6JOhW8btpA3mxGysL6xOfx:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6JOhW8btpA3mxGysL6xOfx:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6JOhW8btpA3mxGysL6xOfx:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127776704037//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.383Z",
    "modified": "2025-10-22T10:09:36.868Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "d0d5c0f6-c1fb-4cc7-8c1a-49f5fd042259",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC009-Fallback vision handling for unsupported models",
    "description": "Ensure that when AI models do not support vision input, fallback textual descriptions are used and responses generate without errors.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Start Chatting Free' button to initiate a chat session.\n        frame = context.pages[-1]\n        # Click on 'Start Chatting Free' button to start a chat session\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a test email address and click Continue to proceed to chat interface.\n        frame = context.pages[-1]\n        # Input test email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed after entering email\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Start Chatting Free' button to attempt initiating a chat session again.\n        frame = context.pages[-1]\n        # Click on 'Start Chatting Free' button to start chat session\n        elem = frame.locator('xpath=html/body/div[3]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address and click Continue to proceed to chat interface.\n        frame = context.pages[-1]\n        # Input a valid email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed after entering valid email\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to navigate to the sign-up page to create an account or explore alternative ways to access chat interface.\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to navigate to sign-up page\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a new email and password to create an account and proceed to chat interface.\n        frame = context.pages[-1]\n        # Input new email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testcreate@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Vision Input Supported').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: AI models do not support vision input, so fallback textual descriptions should be used and responses should generate without errors.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing cannot proceed because account creation is blocked by security validation errors. Unable to access chat interface to test fallback textual descriptions for AI models without vision support. Please resolve the sign-up issue to continue testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP6JckFHvSu0wDZvoS4NfWYc:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6JckFHvSu0wDZvoS4NfWYc:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6JckFHvSu0wDZvoS4NfWYc:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6JckFHvSu0wDZvoS4NfWYc:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127894802887//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.389Z",
    "modified": "2025-10-22T10:11:34.986Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "884683af-5894-4cc6-a85c-2d0fb380a3b2",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC010-Maintain conversation context across multi-turn dialogues",
    "description": "Verify that AI models maintain conversation context correctly for multiple consecutive turns within the same chat session.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Start Chatting Free' button to initiate Battle Mode chat session.\n        frame = context.pages[-1]\n        # Click on 'Start Chatting Free' button to start Battle Mode chat session\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a test email address and click Continue to proceed to chat.\n        frame = context.pages[-1]\n        # Input test email address in email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed after entering email\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account and proceed with Battle Mode chat session.\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to navigate to account creation page\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address and password, then click Continue to create the account and proceed to the chat session.\n        frame = context.pages[-1]\n        # Input valid email address in email field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password in password field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=AI conversation context maintained successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: The AI models did not maintain conversation context correctly for multiple consecutive turns within the same chat session as required by the test plan.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Account creation is blocked by security validation errors, preventing access to the Battle Mode chat session needed to verify conversation context. Reporting this issue and stopping further actions as the task cannot proceed.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP2FbhnQjd7M6vtq5e5c8NUr:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP2FbhnQjd7M6vtq5e5c8NUr:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP2FbhnQjd7M6vtq5e5c8NUr:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127794638616//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.395Z",
    "modified": "2025-10-22T10:09:54.779Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "058c0c87-b62c-4e8b-bfcd-645f4abe99b1",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC011-Vote up and vote down AI responses",
    "description": "Validate users can upvote or downvote each AI model response and the vote state persists correctly.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click the 'Start Chatting Free' button to render AI responses side by side for voting.\n        frame = context.pages[-1]\n        # Click the 'Start Chatting Free' button to start the AI response battle and render responses side by side\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to sign in.\n        frame = context.pages[-1]\n        # Input email address for sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click the 'Sign up' link to create a new account for testing or find an alternative way to access AI response voting.\n        frame = context.pages[-1]\n        # Click the 'Sign up' link to create a new account for testing\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create the account and proceed to chat page.\n        frame = context.pages[-1]\n        # Input email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Vote registered successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The test plan execution failed to validate that users can upvote or downvote each AI model response and that the vote state persists correctly after page reload.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to create an account. The sign-up process fails with a security validation error, preventing access to the chat page where AI model responses can be voted on. Please resolve the sign-up issue to enable voting functionality testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP30ZH4GGCdYprFvLGnqBUr9:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP30ZH4GGCdYprFvLGnqBUr9:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP30ZH4GGCdYprFvLGnqBUr9:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127996072801//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.401Z",
    "modified": "2025-10-22T10:13:16.337Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "fc66bcd1-4c1b-4c76-bf2f-5d2a72c2d6aa",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC012-Share battle results on social media",
    "description": "Ensure that social media sharing buttons open correct share dialogs with pre-filled battle result info and links.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Start Chatting Free' button to initiate a battle conversation.\n        frame = context.pages[-1]\n        # Click 'Start Chatting Free' button to start a battle conversation\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a test email address and click Continue to sign in and proceed to battle conversation.\n        frame = context.pages[-1]\n        # Input test email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed after entering email\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account and proceed with battle conversation.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address and password, then click Continue to create the account and proceed.\n        frame = context.pages[-1]\n        # Input email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Share on LinkedIn with exclusive battle insights').first).to_be_visible(timeout=30000)\n        except AssertionError:\n            raise AssertionError(\"Test plan failed: Social media sharing buttons did not open the correct share dialogs with pre-filled battle result info and links as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing due to account creation failure caused by security validation errors. Cannot proceed to test social media share buttons without completing a battle conversation. Issue reported.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP6b8gBQrPgMNzICA8G71c0e:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6b8gBQrPgMNzICA8G71c0e:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP6b8gBQrPgMNzICA8G71c0e:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127772166864//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.407Z",
    "modified": "2025-10-22T10:09:32.303Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "e0dfdd92-285c-4487-979a-efa437542792",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC013-Copy battle result link to clipboard",
    "description": "Check that copying link to clipboard button copies the accurate URL and toast notification confirms action.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Start Your First Battle' to complete AI battle session\n        frame = context.pages[-1]\n        # Click 'Start Your First Battle' button to complete AI battle session\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div[5]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to sign in and proceed to battle session\n        frame = context.pages[-1]\n        # Input email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Locate and open the share modal to access the 'Copy Link' button\n        await page.mouse.wheel(0, await page.evaluate('() => window.innerHeight'))\n        \n\n        frame = context.pages[-1]\n        # Click 'Start Your First Battle' button to try to open battle session or share modal\n        elem = frame.locator('xpath=html/body/div[3]/main/div/div/div[5]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Look for any visible share modal or copy link button on this page or navigate back to homepage to try other options.\n        await page.mouse.wheel(0, await page.evaluate('() => window.innerHeight'))\n        \n\n        # -> Look for any share modal or copy link button on the homepage or accessible page to test copy link functionality.\n        await page.mouse.wheel(0, await page.evaluate('() => window.innerHeight'))\n        \n\n        frame = context.pages[-1]\n        # Click 'Start Your First Battle' button to try to access battle session or share modal\n        elem = frame.locator('xpath=html/body/div[3]/main/div/div/div[5]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click 'Start Your First Battle' to try to start battle session and access share modal for copy link button\n        frame = context.pages[-1]\n        # Click 'Start Your First Battle' button to start battle session or open share modal\n        elem = frame.locator('xpath=html/body/div[3]/main/div/div/div[5]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Try to sign in with a valid email to access battle session and share modal for copy link button\n        frame = context.pages[-1]\n        # Input valid email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Copy Link to Clipboard Success!').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The 'Copy Link' button did not copy the accurate URL to clipboard or the toast notification confirming the successful copy did not appear as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to sign-in failure blocking access to battle session and share modal. Unable to verify copy link button functionality and toast notification. Reported the issue.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP8fjpj8VwWflSPZ6yHnUCiq:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP8fjpj8VwWflSPZ6yHnUCiq:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP8fjpj8VwWflSPZ6yHnUCiq:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127930965975//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.420Z",
    "modified": "2025-10-22T10:12:11.188Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "57c1208c-e342-4202-8942-3d600c73400b",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC014-Keyboard shortcut for submitting chat input",
    "description": "Ensure keyboard shortcut (e.g., Enter or Ctrl+Enter) submits chat input correctly without errors.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click 'Start Chatting Free' button to open chat interface where input can be tested.\n        frame = context.pages[-1]\n        # Click 'Start Chatting Free' button to open chat interface\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Focus on email input field to start sign-in process.\n        frame = context.pages[-1]\n        # Focus on email input field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a test email into the email field and submit to proceed to chat interface.\n        frame = context.pages[-1]\n        # Input test email into email address field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit email and proceed\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click 'Sign up' link to start account creation process.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to start account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email and password to create new account and proceed.\n        frame = context.pages[-1]\n        # Input new test email for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit account creation form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click 'Sign in' link to return to sign-in page and try alternative approach.\n        frame = context.pages[-1]\n        # Click 'Sign in' link to return to sign-in page\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Focus on email input field to try signing in with a valid or known email to access chat interface.\n        frame = context.pages[-1]\n        # Focus on email input field\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address to attempt sign-in and access chat interface.\n        frame = context.pages[-1]\n        # Input valid email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit email and proceed\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Keyboard shortcut submission successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: Keyboard shortcut submission of chat input did not work as expected. The chat input was not submitted and AI responses were not triggered as per the test plan.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with testing keyboard shortcut submission in chat input due to lack of valid sign-in credentials. Multiple attempts to sign in or create account failed. Please provide valid credentials or access to chat interface to continue testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP392QW3oaIe2dEriMMbQLfZ:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP392QW3oaIe2dEriMMbQLfZ:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP392QW3oaIe2dEriMMbQLfZ:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP392QW3oaIe2dEriMMbQLfZ:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127910203031//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.426Z",
    "modified": "2025-10-22T10:11:50.380Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "991466b3-80d3-4dd3-9163-443d4619a5b1",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC015-Keyboard shortcut to clear input",
    "description": "Verify that the keyboard shortcut to clear chat input (e.g., Escape) clears the current input immediately.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Start Chatting Free' to open the chat interface where the chat input is available.\n        frame = context.pages[-1]\n        # Click on 'Start Chatting Free' button to open chat interface\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a test email to proceed to the next step or find a way to access chat input directly.\n        frame = context.pages[-1]\n        # Input test email to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        # -> Click Continue button to proceed to chat interface or next step where chat input is available.\n        frame = context.pages[-1]\n        # Click Continue button to proceed to chat interface\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Clear chat input successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The keyboard shortcut to clear chat input did not clear the input immediately as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The test to verify the keyboard shortcut to clear chat input could not be completed because access to the chat input was blocked by the sign-in process. The test email used was not recognized, resulting in an error and preventing progress. The issue has been reported. Further testing requires valid sign-in credentials or an alternative way to access the chat input.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP4CC3Mnqq5tS3ZTrVH7u6Nt:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP4CC3Mnqq5tS3ZTrVH7u6Nt:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127698757591//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.432Z",
    "modified": "2025-10-22T10:08:18.896Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "bd46cd14-e3b7-4479-a651-5f2bfea81ad8",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC016-Keyboard shortcut to start new chat",
    "description": "Validate that the new chat keyboard shortcut (e.g., Ctrl+N) resets the chat interface and clears conversation context.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click the 'Start Chatting Free' button to initiate an active conversation.\n        frame = context.pages[-1]\n        # Click the 'Start Chatting Free' button to start an active conversation\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to sign in and start an active conversation.\n        frame = context.pages[-1]\n        # Input email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click 'Sign up' link to create an account or find alternative way to start an active conversation.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to create an account or find alternative way to start an active conversation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid email and password, then click Continue to create account and start an active conversation.\n        frame = context.pages[-1]\n        # Input email address to create account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password to create account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to create account and proceed\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Chat Reset Successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: The new chat keyboard shortcut (Ctrl+N) did not reset the chat interface or clear the conversation context as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to create an account and start an active conversation because of sign-up security validation errors. Cannot validate the new chat keyboard shortcut without an active conversation. Please resolve the sign-up issue first.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuP90U003JppenfgoWPnXSRFd:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP90U003JppenfgoWPnXSRFd:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuP90U003JppenfgoWPnXSRFd:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127797425988//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.438Z",
    "modified": "2025-10-22T10:09:57.564Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "41a3e0bd-d4e6-46d9-95df-5418db082a59",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC017-Chat history retrieval and pagination",
    "description": "Ensure authenticated user can view chat history with pagination controls to navigate through multiple pages of conversations.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click on 'Sign In' to proceed with authentication.\n        frame = context.pages[-1]\n        # Click on 'Sign In' link to navigate to sign-in page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to proceed with sign-in.\n        frame = context.pages[-1]\n        # Input email address for sign-in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account for testing.\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to navigate to registration page\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create a new account.\n        frame = context.pages[-1]\n        # Input a new valid email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('newtestuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input a valid password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit the sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Chat History Pagination Controls').first).to_be_visible(timeout=30000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The test plan requires verifying that an authenticated user can view chat history with pagination controls to navigate through multiple pages of conversations, but the expected pagination controls are not visible on the page.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Stopped testing because sign-up failed due to security validation errors, preventing user authentication and access to chat history. Reported the issue for resolution.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/493-45a9d5b0750a13e3.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/main-app-321157bcecbd9992.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/4bd1b696-c023c6e3521b1417.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/162-0da6ee64e8ce5429.js:0:0)\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPhTY2xKERUcmooc1sXaqOvD:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPhTY2xKERUcmooc1sXaqOvD:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPhTY2xKERUcmooc1sXaqOvD:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127795287557//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.444Z",
    "modified": "2025-10-22T10:09:55.459Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "7459891a-9e9e-4f7a-a9b6-0a5edf1e9550",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC018-Search chat history",
    "description": "Validate that the search input filters chat history accurately by keywords or metadata.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to chat history page\n        frame = context.pages[-1]\n        # Click on 'Sign In' to access user account for chat history\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Enter email address and continue to access chat history\n        frame = context.pages[-1]\n        # Enter email address in sign-in input\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' link to create a new account or find alternative way to access chat history\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Enter email and password, then click Continue to create account\n        frame = context.pages[-1]\n        # Enter email address in sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Enter password in sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign in' link to return to sign-in page and try alternative approach or report issue\n        frame = context.pages[-1]\n        # Click on 'Sign in' link to return to sign-in page\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Enter a valid email address and click Continue to attempt sign-in again or find alternative way to access chat history\n        frame = context.pages[-1]\n        # Enter a valid existing user email address in sign-in input\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('existinguser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to attempt sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=No Matching Conversations Found').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test plan failed: The search input did not filter chat history accurately by keywords or metadata as expected.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Unable to proceed with testing search input filtering on chat history because no valid user account exists or can be created. Sign-in attempts with existing and test emails failed, and sign-up attempts failed due to security validation errors. Without access to chat history, the search input filter validation cannot be performed.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPgZkGycZxcLCXt4a3b3u16V:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPgZkGycZxcLCXt4a3b3u16V:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPgZkGycZxcLCXt4a3b3u16V:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPgZkGycZxcLCXt4a3b3u16V:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127840827324//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.450Z",
    "modified": "2025-10-22T10:10:40.960Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "fee80405-47a6-435a-b197-0a8e6a160d80",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC019-Filter chat history by date or tags",
    "description": "Check that users can apply filters on chat history such as date range or conversation tags, and results update accordingly.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to chat history page\n        frame = context.pages[-1]\n        # Click on 'Sign In' to access user account for chat history\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address to sign in\n        frame = context.pages[-1]\n        # Input email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' to create a new account to proceed\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email and password, then click Continue to create account\n        frame = context.pages[-1]\n        # Input a new email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('newuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input a secure password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('SecurePass123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Filter Applied Successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError('Test case failed: The test plan execution failed to verify that users can apply filters on chat history such as date range or conversation tags, and results update accordingly.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to create an account. Sign-up process fails with security validation errors, preventing access to chat history page and filter functionality testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPXSY06eEF3BWCgpzG93iOsO:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPXSY06eEF3BWCgpzG93iOsO:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPXSY06eEF3BWCgpzG93iOsO:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127799380365//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.456Z",
    "modified": "2025-10-22T10:09:59.511Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "819cae99-20c2-499f-937b-40c12b4dc20e",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC020-Delete single chat conversation",
    "description": "Confirm that users can delete individual chat conversations and they are removed from history persistently.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Navigate to chat conversation history or chat list to select a conversation for deletion.\n        frame = context.pages[-1]\n        # Click 'Start Chatting Free' to enter chat interface or chat history where conversations might be listed\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address to sign in and access chat conversation history.\n        frame = context.pages[-1]\n        # Input email address to sign in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Try to sign up or use a valid account to access chat conversation history for deletion.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to create a new account or find a way to access chat history\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password to create a new account and proceed.\n        frame = context.pages[-1]\n        # Input email address for new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Conversation Deleted Successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: The chat conversation deletion did not succeed as expected. The conversation still appears in the UI or backend after deletion attempt, violating the test plan requirement for persistent removal.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical issue: unable to create account because of failed security validations during sign-up. Cannot proceed to test chat conversation deletion without account access.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/css/aeb9d9b44b2f8ecc.css:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/webpack-baec66582bfca01c.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/493-45a9d5b0750a13e3.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/main-app-321157bcecbd9992.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/162-0da6ee64e8ce5429.js:0:0)\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPlgfQ0KHhh94EEIWrLxLUgd:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at https://clerk-telemetry.com/v1/event:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPlgfQ0KHhh94EEIWrLxLUgd:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPlgfQ0KHhh94EEIWrLxLUgd:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127789013653//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.462Z",
    "modified": "2025-10-22T10:09:49.153Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "f00a6237-eb81-4178-9ff0-61e5a01bc90f",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC021-Bulk delete multiple chat conversations",
    "description": "Validate that users can select multiple chat conversations and delete them in a single batch operation.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Scroll down to locate chat conversation list and checkboxes for selecting multiple conversations\n        await page.mouse.wheel(0, 500)\n        \n\n        # -> Scroll down further or extract content to locate chat conversation checkboxes for multiple selection\n        await page.mouse.wheel(0, 500)\n        \n\n        # -> Click on 'Sign In' to access user account and chat history\n        frame = context.pages[-1]\n        # Click on 'Sign In' link to access user account and chat history\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email address and click Continue to sign in and access chat conversations\n        frame = context.pages[-1]\n        # Input valid email address to sign in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click on 'Sign up' to create a new account or try a different valid email to sign in\n        frame = context.pages[-1]\n        # Click on 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[2]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password to create a new account and proceed to chat conversation list\n        frame = context.pages[-1]\n        # Input new email address for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('newuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('StrongPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to create account and proceed\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Batch Delete Successful').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test failed: The test plan to validate batch deletion of multiple chat conversations failed. The expected confirmation message 'Batch Delete Successful' was not found, indicating the deletion did not occur as intended.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to inability to sign in or create an account because of failed security validations during sign-up. Cannot proceed to validate multi-selection and batch delete of chat conversations.\nBrowser Console Logs:\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/css/aeb9d9b44b2f8ecc.css:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/webpack-baec66582bfca01c.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/main-app-321157bcecbd9992.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/4bd1b696-c023c6e3521b1417.js:0:0)\n[ERROR] Failed to load resource: net::ERR_EMPTY_RESPONSE (at http://localhost:3000/_next/static/chunks/493-45a9d5b0750a13e3.js:0:0)\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPh3kzHAsdpRFmgOeJhGKs2W:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPh3kzHAsdpRFmgOeJhGKs2W:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPh3kzHAsdpRFmgOeJhGKs2W:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127799288725//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.468Z",
    "modified": "2025-10-22T10:09:59.427Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "6435059c-40df-4a62-80e8-1400675ccaa1",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC022-Toast notification success and error handling",
    "description": "Check that toast notifications appear for successful actions (e.g., message sent, votes registered) and error conditions (e.g., upload failure).",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click 'Sign In' to attempt login and trigger success or error toast notifications.\n        frame = context.pages[-1]\n        # Click on 'Sign In' to open login form and test toast notifications on login success or failure\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input invalid email and click Continue to trigger error toast notification for login failure.\n        frame = context.pages[-1]\n        # Input invalid email to trigger error toast on login attempt\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('invalid-email')\n        \n\n        frame = context.pages[-1]\n        # Click Continue to submit invalid email and trigger error toast notification\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password to attempt login and trigger a success or error toast notification.\n        frame = context.pages[-1]\n        # Input valid email to test success or error toast on login attempt\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue to submit valid email and proceed to password input or login attempt\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate back to homepage to perform actions that can trigger success toast notifications, such as submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to navigate away from sign-in page and then navigate back to homepage to test success toasts\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input valid email and password to attempt account creation and trigger success or error toast notifications.\n        frame = context.pages[-1]\n        # Input valid email for account creation to test success or error toast notifications\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password for account creation\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue to submit sign-up form and trigger toast notifications for success or error\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate back to the homepage to perform actions that can trigger success toast notifications, such as submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign in' link to navigate back to sign-in page and then navigate to homepage for further tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to homepage or main chat interface to perform actions that trigger success toast notifications like submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to navigate to sign-up page and then navigate to homepage or main chat interface for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to homepage or main chat interface to perform actions that can trigger success toast notifications like submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign in' link to navigate to sign-in page and then navigate to homepage or main chat interface for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Attempt to sign in with valid credentials to trigger success toast notification or error notification if login fails.\n        frame = context.pages[-1]\n        # Input valid email to test success or error toast on login attempt\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('validuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue to submit valid email and proceed to next step\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to the homepage or main chat interface to perform actions that can trigger success toast notifications like submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to navigate away from sign-in page and then navigate to homepage or main chat interface for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to homepage or main chat interface to perform actions that can trigger success toast notifications like submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign in' link to navigate to sign-in page and then navigate to homepage or main chat interface for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to the main chat interface or homepage to perform actions that can trigger success toast notifications like submitting a prompt or voting.\n        frame = context.pages[-1]\n        # Click 'Sign up' link to navigate to sign-up page and then navigate to main chat interface or homepage for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        # Click 'Sign in' link to navigate back to sign-in page and then navigate to main chat interface or homepage for success toast tests\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Navigate to the main chat interface or homepage to perform actions that can trigger success toast notifications like submitting a prompt or voting.\n        await page.goto('http://localhost:3000', timeout=10000)\n        await asyncio.sleep(3)\n        \n\n        # -> Click 'Start Chatting Free' to enter chat interface and perform actions that trigger success toast notifications.\n        frame = context.pages[-1]\n        # Click 'Start Chatting Free' to enter chat interface for success toast tests\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Upload completed successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError(\"Test case failed: Toast notifications for successful actions and error conditions did not appear as expected during the test plan execution.\")\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Toast notifications for error conditions such as invalid login and sign-up failures were successfully verified. However, success toast notifications for successful actions like message sent or votes registered were not triggered or verified due to navigation constraints. Additional error scenarios such as upload failure were also not tested. Task is partially complete.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPfJbmZH3h8rLscGv2pOIzEX:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPfJbmZH3h8rLscGv2pOIzEX:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPfJbmZH3h8rLscGv2pOIzEX:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPfJbmZH3h8rLscGv2pOIzEX:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPfJbmZH3h8rLscGv2pOIzEX:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761128103168387//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.474Z",
    "modified": "2025-10-22T10:15:03.398Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "76d54533-e499-4789-94c9-c4b2dfbd770d",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC023-Animated neon-themed background rendering",
    "description": "Validate that the dynamic neon-themed animated gradient background loads smoothly and performs well across devices and browsers.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Scroll down to observe the animated gradient background and verify its smoothness and performance on this landing page.\n        await page.mouse.wheel(0, 600)\n        \n\n        # -> Navigate to the chat page to verify the animated gradient background there.\n        frame = context.pages[-1]\n        # Click on 'ChatBattles .ai' link or equivalent to navigate to chat page\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Scroll down the chat page to verify the animated gradient background's smoothness and performance visually.\n        await page.mouse.wheel(0, 600)\n        \n\n        # -> Navigate to the profile page on desktop to verify the animated gradient background there.\n        frame = context.pages[-1]\n        # Click on 'Home' or equivalent to navigate to profile page or main page with profile section\n        elem = frame.locator('xpath=html/body/div[2]/nav/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Animated Gradient Background Loaded Successfully').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError('Test case failed: The dynamic neon-themed animated gradient background did not load smoothly or perform well across devices and browsers as required by the test plan.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to navigation issue preventing access to the profile page. Landing and chat pages on desktop were verified for the animated neon-themed gradient background with smooth animation and good performance. Mobile and cross-browser testing could not be completed due to this issue.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPhbq62lB7GhzfVpbEd2fNZG:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127805399354//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.480Z",
    "modified": "2025-10-22T10:10:05.599Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "e8a3a62f-43a3-4d7b-b08f-50cfc7fc0f66",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC024-Loading skeletons display during data fetch",
    "description": "Verify that skeleton placeholders appear appropriately during loading states in chat responses and chat history data fetching.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Click the 'Start Chatting Free' button to trigger AI battle responses submission and observe the response area for loading skeletons.\n        frame = context.pages[-1]\n        # Click the 'Start Chatting Free' button to start a chat and trigger AI battle responses submission\n        elem = frame.locator('xpath=html/body/div[2]/main/div/div/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input email address and click Continue to sign in and proceed to chat page.\n        frame = context.pages[-1]\n        # Input email address to sign in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('test@example.com')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to proceed with sign-in\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Click the 'Sign up' link to create a new account or find a way to sign in with a valid account to proceed to chat and test loading skeletons.\n        frame = context.pages[-1]\n        # Click the 'Sign up' link to create a new account\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # -> Input a valid email and password, then click Continue to create the account and proceed to the chat page.\n        frame = context.pages[-1]\n        # Input valid email address for sign-up\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('testuser@example.com')\n        \n\n        frame = context.pages[-1]\n        # Input valid password for sign-up\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div/div[2]/div/div/div[2]/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('TestPassword123!')\n        \n\n        frame = context.pages[-1]\n        # Click Continue button to submit sign-up form\n        elem = frame.locator('xpath=html/body/div[3]/div[2]/div/div/div/div[2]/form/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        try:\n            await expect(frame.locator('text=Loading complete, no skeletons found').first).to_be_visible(timeout=1000)\n        except AssertionError:\n            raise AssertionError('Test failed: Loading skeleton placeholders did not appear appropriately during chat response and chat history data fetching as required by the test plan.')\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to sign-up failure caused by security validation errors. Unable to access chat interface to verify loading skeleton placeholders during loading states. Please resolve the sign-up issue to proceed with testing.\nBrowser Console Logs:\n[WARNING] Clerk: Clerk has been loaded with development keys. Development instances have strict usage limits and should not be used when deploying your application to production. Learn more: https://clerk.com/docs/deployments/overview (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The prop \"afterSignInUrl\" is deprecated and should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/speed-insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 404 (Not Found) (at http://localhost:3000/_vercel/insights/script.js:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/environment?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&_method=PATCH&__clerk_db_jwt=dvb_34PuPgQfjbiI3Lyko2V95QuxhKo:0:0)\n[WARNING] Clerk: The \"signInFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignInUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignInUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[WARNING] Clerk: The \"signUpFallbackRedirectUrl\" prop (\"http://localhost:3000/chat\") has priority over the legacy \"afterSignUpUrl\" (or \"redirectUrl\") (\"http://localhost:3000/chat\"), which will be completely ignored in this case. \"afterSignUpUrl\" (or \"redirectUrl\" prop) should be replaced with the new \"fallbackRedirectUrl\" or \"forceRedirectUrl\" props instead. Learn more: https://clerk.com/docs/guides/custom-redirects#redirect-url-props (at https://pleasing-termite-3.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js:18:1328)\n[ERROR] Failed to load resource: the server responded with a status of 422 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ins?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPgQfjbiI3Lyko2V95QuxhKo:0:0)\n[ERROR] Failed to load resource: the server responded with a status of 400 () (at https://pleasing-termite-3.clerk.accounts.dev/v1/client/sign_ups?__clerk_api_version=2025-04-10&_clerk_js_version=5.102.0&__clerk_db_jwt=dvb_34PuPgQfjbiI3Lyko2V95QuxhKo:0:0)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127809586876//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.486Z",
    "modified": "2025-10-22T10:10:09.783Z"
  },
  {
    "projectId": "75b52aec-5c1b-497c-b226-fa907834e361",
    "testId": "f5d9ab01-c82c-42bd-b1b7-cd74459e7610",
    "userId": "54b894a8-4071-703a-3bed-502426ff4f99",
    "title": "TC025-SEO metadata and sitemap validation",
    "description": "Ensure landing and static informational pages include correct SEO metadata tags, sitemap.xml is generated properly, and robots.txt disallows sensitive paths.",
    "code": "import asyncio\nfrom playwright import async_api\nfrom playwright.async_api import expect\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:3000\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # -> Fetch sitemap.xml and check for correct URLs\n        await page.goto('http://localhost:3000/sitemap.xml', timeout=10000)\n        await asyncio.sleep(3)\n        \n\n        # -> Navigate to /robots.txt and verify its contents to ensure sensitive paths are disallowed\n        await page.goto('http://localhost:3000/robots.txt', timeout=10000)\n        await asyncio.sleep(3)\n        \n\n        # -> Check another static informational page (e.g., /about) for presence of correct SEO metadata tags\n        await page.goto('http://localhost:3000/about', timeout=10000)\n        await asyncio.sleep(3)\n        \n\n        # --> Assertions to verify final state\n        frame = context.pages[-1]\n        await expect(frame.locator('text=ChatBattles.ai').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Home').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Sign In').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Sign Up').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=About ChatBattles.ai').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Empowering users to compare and choose the best AI for their needs').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=⚔️').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Our Mission').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=In a world with countless AI models, each with unique strengths and perspectives, we asked ourselves: Why choose just one?').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=ChatBattles.ai was born from the belief that comparing AI responses shouldn\\'t be complicated. We make it simple, visual, and free for everyone to see multiple AI perspectives side-by-side in real-time.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🎯 What We Do').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=⚡ Instant Comparison').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Submit one prompt and watch three top AI models respond simultaneously').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🎨 Beautiful Interface').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Enjoy a sleek, futuristic design that makes AI comparison effortless').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=💎 Completely Free').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=No subscriptions, no hidden fees—just pure AI power at your fingertips').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=📝 History Tracking').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Save and revisit your favorite AI battles anytime').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🤖 The Models We Battle').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=GPT-5-Nano').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=OpenAI\\'s latest nano model, optimized for speed and efficiency without compromising on intelligence. Perfect for quick, accurate responses.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Grok-4').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=X.ai\\'s conversational powerhouse with a unique personality. Known for its wit, real-world knowledge, and engaging responses.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=DeepSeek v3.1').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Advanced reasoning model excelling at complex problem-solving, technical analysis, and deep dives into challenging topics.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=💡 Why We Built This').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=As AI enthusiasts, we found ourselves constantly switching between different AI platforms to compare responses. It was time-consuming and frustrating.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=We thought: \"There has to be a better way.\"').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=So we built ChatBattles.ai—a platform that brings multiple AI models into one arena, letting them battle for the best response. The result? Better insights, faster decisions, and a more complete understanding of any topic.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🌟 Our Values').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🔓 Open Access').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=AI power should be accessible to everyone, not just those who can afford premium subscriptions').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🎯 Transparency').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=We show you exactly what each AI thinks, with no hidden algorithms or biased curation').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🚀 Innovation').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=We\\'re constantly evolving, adding new models and features based on your feedback').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=👨‍💻 Built with Passion').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=ChatBattles.ai was created by Biraj, a developer passionate about making AI technology more accessible and useful for everyone.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Built with cutting-edge technologies including Next.js 15, TypeScript, Tailwind CSS, Clerk authentication, and Supabase database—all to provide you with the best AI comparison experience.').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=🔮 What\\'s Next?').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=We\\'re just getting started! Here\\'s what\\'s on our roadmap:').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=▸ More AI models to compare (Claude, Llama, Gemini, and more)').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=▸ Custom model selection for personalized battles').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=▸ Shareable battle results for easy collaboration').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=▸ Advanced analytics and model comparison metrics').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=▸ Community features and public battle archives').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Ready to Battle?').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Join thousands of users comparing AI responses every day').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Start Your First Battle').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=About').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=FAQ').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Contact').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Terms').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=Privacy').first).to_be_visible(timeout=30000)\n        await expect(frame.locator('text=© 2025 ChatBattles.ai — Made with ⚡ by Biraj').first).to_be_visible(timeout=30000)\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/54b894a8-4071-703a-3bed-502426ff4f99/1761127826336272//tmp/test_task/result.webm",
    "created": "2025-10-22T10:04:53.492Z",
    "modified": "2025-10-22T10:10:26.633Z"
  }
]
